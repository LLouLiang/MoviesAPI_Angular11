// <auto-generated />
using System;
using AngularMoviesAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace AngularMoviesAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210523180749_Movieandfriends")]
    partial class Movieandfriends
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AngularMoviesAPI.Entities.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.Movie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("inTheater")
                        .HasColumnType("bit");

                    b.Property<string>("poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trailer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieActors", b =>
                {
                    b.Property<int>("actorId")
                        .HasColumnType("int");

                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.Property<string>("character")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("actorId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieGenres", b =>
                {
                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.Property<int>("genreId")
                        .HasColumnType("int");

                    b.HasKey("movieId", "genreId");

                    b.HasIndex("genreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieTheater", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Point>("location")
                        .HasColumnType("geography");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("id");

                    b.ToTable("MovieTheater");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieTheaterMovies", b =>
                {
                    b.Property<int>("movieTheaterId")
                        .HasColumnType("int");

                    b.Property<int>("movieId")
                        .HasColumnType("int");

                    b.HasKey("movieTheaterId", "movieId");

                    b.HasIndex("movieId");

                    b.ToTable("MovieTheaterMovies");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieActors", b =>
                {
                    b.HasOne("AngularMoviesAPI.Entities.Actor", "actor")
                        .WithMany()
                        .HasForeignKey("actorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularMoviesAPI.Entities.Movie", "movie")
                        .WithMany()
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actor");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieGenres", b =>
                {
                    b.HasOne("AngularMoviesAPI.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularMoviesAPI.Entities.Movie", "Movie")
                        .WithMany("movieGenres")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.MovieTheaterMovies", b =>
                {
                    b.HasOne("AngularMoviesAPI.Entities.Movie", "movie")
                        .WithMany("movieTheaterMovies")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularMoviesAPI.Entities.MovieTheater", "movieTheater")
                        .WithMany()
                        .HasForeignKey("movieTheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("movieTheater");
                });

            modelBuilder.Entity("AngularMoviesAPI.Entities.Movie", b =>
                {
                    b.Navigation("movieGenres");

                    b.Navigation("movieTheaterMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
